Unity's floating point features:

UNITY_EXCLUDE_FLOAT - disallow floating point comparisons
UNITY_INCLUDE_DOUBLE - allow double floating point comparisons
UNITY_EXCLUDE_DOUBLE - disallow double floating point comparisons (default)
    Handle by providing pfstest-{values,matchers}-{float,double}.c

UNITY_FLOAT_PRECISION - specify the precision to use when doing EQUAL_FLOAT
UNITY_DOUBLE_PRECISION - specify the precision to use when doing EQUAL_DOUBLE
    These are just default argument for wrappers around ASSERT_*_WITHIN

UNITY_FLOAT_VERBOSE - print floating point values in errors (uses sprintf)
    Uses sprintf with %.6f
UNITY_DOUBLE_VERBOSE - print floating point values in errors (uses sprintf)
    (A lie, actually casts to float before printing)
    Handle with a global function pointer and pfstest-double-sprintf.c

UNITY_FLOAT_TYPE - specify doubles instead of single precision floats
UNITY_DOUBLE_TYPE - specify something other than double
    I don't want to offer these

TEST_ASSERT_FLOAT_WITHIN(delta, expected, actual)
TEST_ASSERT_EQUAL_FLOAT(expected, actual)
TEST_ASSERT_EQUAL_FLOAT_ARRAY(expected, actual, num_elements)
TEST_ASSERT_FLOAT_IS_INF(actual)
TEST_ASSERT_FLOAT_IS_NEG_INF(actual)
TEST_ASSERT_FLOAT_IS_NAN(actual)

TEST_ASSERT_DOUBLE_WITHIN(delta, expected, actual)
TEST_ASSERT_EQUAL_DOUBLE(expected, actual)
TEST_ASSERT_EQUAL_DOUBLE_ARRAY(expected, actual, num_elements)
TEST_ASSERT_DOUBLE_IS_INF(actual)
TEST_ASSERT_DOUBLE_IS_NEG_INF(actual)
TEST_ASSERT_DOUBLE_IS_NAN(actual)

Properly handles NaN in tolerance-based comparisons

****************

the_float(f)
is_float_inf()
is_float_neg_inf()
is_float_nan()
is_a_float_near(actual, tolerance)

the_double(d)
is_a_double_near(actual, tolerance)
is_double_inf()
is_double_neg_inf()
is_double_nan()

****************

tests/test-values-and-matchers.c:the_short_should_print_itself FAIL
    Location: tests/test-values-and-matchers.c:28
    Failed assertion: shorts print themselves
    Expected: a float within the expected tolerances
    Actual:   a float
