Dennis Lambe
Notes on issues and possibilities for implementing auto-mocking in PFSTest
Last modified: <2017-09-22 19:39:40>

1) Identify all things in a header file which are functions. (if pre-processing, restrict to all functions which are actually textually defined in that .h file, not included from other files)
2) Identify the return type and types of all arguments
3) Generate a C file which stubs out each of those functions with a call to the invocation logger

Going over my old design of mock-dep.c, I see that I have arranged for the code generator to need to know hardly anything at all about the argument types or return types. Based on the very simple test that I did in notes/automock-test.c, I find that this is the data that I need in order to produce a mock function for a given function:

* The function name as a string
* The full function prototype, as a string
* The full return type, as a string, for declaring variables of the same type
* Whether the return type is: void, pointer, struct, or primitive
* The number of arguments
* The name of each argument as a string
    WELL ACTUALLY they might not have names, so I should be prepared to substitute my own
* Whether each argument is a pointer or not

====

C Preprocessors seem to universally produce file-and-line-tracking output like this:

# <line> "<file-name>" <other-crap...>

I think I can rely on that.

Except I can't. mcc18 emits #line <line> "<file-name>". I guess it really depends on whether pycparser can handle that, if I decide to go with pycyparser.

pycparser can handle this.

====

My next step was to check out pycparser/pycparserext to see if they offer the level of C parsing support and flexibility that I need.

https://github.com/eliben/pycparser
https://github.com/inducer/pycparserext

====

CMock has useful headers for test cases in the following locations:

test/system/test_compilation
examples/src

====

I want to be able to support at least the following sorts of extensions to the C language:

* Pragmas

* storage-class-specifiers other than auto, register, static, extern

    For example, static on function arguments, overlay in mcc18
    http://ww1.microchip.com/downloads/en/DeviceDoc/MPLAB_C18_Users_Guide_51288d.pdf

* type-qualifiers other than const, volatile

    For example, __flash on AVR, far, near, ram, rom on mcc18
    https://gcc.gnu.org/onlinedocs/gcc-5.4.0/gcc/Named-Address-Spaces.html

* function-specifiers other than inline

    For example, _Noreturn from C11
    http://en.cppreference.com/w/c/language/function_specifiers

    If it's legal to declare a function with these and then define them without, then I can just define these both to empty strings in the preprocessor as well.

* __attribute__(()) and __extension__

    It looks like as long as these are attached to the declaration, they can be stripped from the function definition, but I haven't found a reference for this. I'm not sure if this also applies to attributes attached to parameters. Some attributes, like __packed__, act like type qualifiers in that they create incompatible types.

* calling conventions like __stdcall, __cdecl

    As long as these are attached to the function declaration, they can be left out of the definition.
   https://docs.microsoft.com/en-us/cpp/cpp/calling-conventions
    https://docs.microsoft.com/en-us/cpp/cpp/calling-example-function-prototype-and-call

    __cdecl, __clrcall, __stdcall, __fastcall, __thiscall, __vectorcall, (obsolete: __pascal, __fortran, __syscall, __far)

* Microsoft keywords for variables and pointers

    __based, __restrict, __w64, __unaligned, __sptr, __uptr, tile_static
    https://docs.microsoft.com/en-us/cpp/cpp/based-grammar
    https://docs.microsoft.com/en-us/cpp/cpp/extension-restrict
    https://docs.microsoft.com/en-us/cpp/cpp/w64
    https://docs.microsoft.com/en-us/cpp/cpp/sptr-uptr
    https://docs.microsoft.com/en-us/cpp/cpp/tile-static-keyword

* Microsoft __declspecs

    As long as they are attached to the function declaration, they can be left out of the definition. I wonder if this is also true of declspecs attached to parameters of functions.
    https://docs.microsoft.com/en-us/cpp/cpp/declspec

* Binary numeric constants prefixed by 0b

    Support mostly for not barfing on them

* Anonymous structures

    Support mostly for not barfing on them
