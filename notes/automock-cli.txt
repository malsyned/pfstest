Use case:

pfstest/src
src/
src/dep.h
test/
test/mocks
Makefile
test/test.inc.mk


build test/mocks/mock-dep.[ch] from src/dep.h

cpp src/dep.h | automock.py -i - -h src/dep.h -o test/mocks/mock-dep

Should create test/mocks/mock-dep.h and test/mocks/mock-dep.c. mock-dep.h should contain the original header path pointing to the right place. This means that even though src/dep.h is passed in, and should be used to filter definitions from the mock list, the mock header should include "../../src/dep.h".

mock-dep.c should include mock-dep.h with no path (that is, it should not include "test/mocks/mock-dep.h", just "mock.h".



Code for parsing stdin and writing to the .h and .c files:

    from sys import stdin, stdout
    from pycparser.c_parser import CParser
    ast = CParser().parse(stdin.read(), header)
    # [...]
    with open(path.join(outdir, mockheadername), 'w') as hstream:
        hwriter.write_header(hstream)
    with open(path.join(outdir, mockimplementationname), 'w') as cstream:
        cwriter.write_implementation(cstream)


Code for computing the location of the original header relative to the mock:

>>> path.relpath('src/dep.h', 'mocks/mock-dep')
'../../src/dep.h'

====

Notes:

Since the filename is provided by the user, the guard macro may no longer have to have PFSTEST in it. It certainly doesn't need MOCK in it, since the user will be providing that explicitly in the filename.

====

We get:
* the original H file path
* the target output path

We need:
* the mock H file - target output path
* the mock H file basename - target output path
* the mock C file - target output path
* the original H file path - original H file path
* the relpath from the mock H file to the original H file - original H file path, mock H file path

====

Plan:

Create a new module, MockPathHandler
Constructor: H file path, target output path
Accessors:
    mockheaderpath
    mockguardmacro
    mockimplementationpath
    mockheaderrelpath
    headerpath
    headerrelpath

Supply it to the Mock*Writers in addition to the MockGenerator

Swap the Mock*Writers over to use those accessors instead of MockGenerators
    mgen.headername
    mgen.guardmacro
    mgen.mockheadername
Remove path support from MockGenerator
    Means removing header argument from constructor (yay)
    All tests above shouldGenerateMockFromOtherwiseEmptyHeader

================

automock.py dep.h test/mocks/mock-dep -s overlay -q near -q far -t __builtin_va_list -f __inline -f_Noreturn

automock.py dep.h test/mocks/mock-dep --storage-class-specifier=overlay --type-qualifier=near --type-qualifier=far --types=__builtin_va_list --function-specifier=__inline --function-specifier=_Noreturn

Generate a PFSTest mock from a preprocessed header file on stdin

positional arguments:

 header-name    The name of the original header file
 mock-template  The initial part of the path to the generated mock. automock.py will append .h and .c to this to generate the mock source files

optional arguments:

 -s, --storage-class-specifiers  Additional storage class specifiers to accept
 -q, --type-qualifiers           Additional type qualifiers to accept
 -t, --types                     Additional types to accept
 -f, --function-specifiers       Additional function specifiers to accept
