I want to have a SRCPREFIX that gets removed from filenames before BUILDPREFIX is added to it. This will allow ../ path components to be removed, permitting Makefies to be in a sibling dir to some source code.

I want this to be optional on a file-by-file basis, since some source files are auto-generated mocks, whch are generated in the buildprefix and don't come from the srcprefix. This is easier than it sounds: just patsubst on it -- patsubst passes non-matching words through unmodified. The tricky part is that recipes have to be generated by eval for each file, rather than for each class.

An alternative is for automock.inc.mk to be responsible for creating recipes for the C files it creates. This might actually be the less invasive alternative. I have the nagging feeling that I thought of this already and then thought of a reason not to do it, but since I can't remember what it was, I might as well try since it's possibly a lot easier to implement and understand.

I could try both implementations and see which one I like best, too.

Option 1) Abstract recipes to variables, create additional template rules in automake.

automock.inc.mk knows how to add a new recipe for class-buildprefix/%.mock.[ch]. 

What does automock.inc.mk do?

It += target-src, class-template, and clean-files.


mock objects are class-buildprefix/class-buildprefix/%.mock.o


target-mock-templates:
    remove suffix, add mock-suffix
    add buildprefix


Must change to:
    remove srcprefix
    remove suffix
    add mock-suffix
    add buildprefix


target-output using patsubst is concerning.
$(patsubst $(SRCPREFIX)%,%,files...)


OK, that worked actually very well, but now how do we create the an abstraction of the recipes? Well, how does eval do its thing on this code?
eval $(all-templlates)
eval ... $(class-templates)
eval ... $(call class-template,my-class)
eval ... $$(stuff),my-class...


TO TEST WITH A CLEAR HEAD:

More than one mock. Source files that aren't below SRCPREFIX. Multiple classes.
Mocks of things in srcprefix. Mocks of things not in srcprefix.


Option 2) Generate per-file recipes, rather than per-class pattern recipes.



****************

each target depends on target-obj, which is target-files(.o), which is target-src with buildprefix prepended and .c removed.

So, every object file is:
sort $ 
